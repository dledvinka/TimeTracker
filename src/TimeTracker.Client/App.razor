@inject IProjectService ProjectService;
@inject AuthenticationStateProvider AuthStateProvider
@using System.Security.Claims
@implements IDisposable

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <h3>Whoops!</h3>
                    Looks like you are not logged in. <br />
                    Please <a href="login">log in</a> or <a href="register">register</a> first.
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code
{
    protected override void OnInitialized()
    {
        AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var state = await task;

        if (state != null && state.User.Identity!.IsAuthenticated)
        {
            // && state.User.IsInRole("Admin")
            var roles = state.User.Claims.Where(claim => claim.Type == ClaimTypes.Role).Select(claim => claim.Value);

            if (roles.Contains("Admin"))
            {
                await ProjectService.LoadAllProjectsAsync();
            }
        }
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
