@page "/project"
@page "/project/{id:int}"
@using Mapster

@inject IProjectService ProjectService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@implements IDisposable
@attribute [Authorize]

<h3>@_title</h3>

@* // MudBlazor, Syncfusion, Telerik, DevExpress, or any other UI library can be used to create a form. *@
<EditForm Model="_project" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <MyInputText Id="name" Label="Name" @bind-Value="_project.Name" ValidationFor="() => _project.Name" />
    <MyInputTextArea Id="description" Label="Description" @bind-Value="_project.Description" ValidationFor="() => _project.Description" />
    <MyInputNullableDate Id="startDate" Label="Start" @bind-Value="_project.StartDate" ValidationFor="() => _project.StartDate" />
    <MyInputNullableDate Id="endDate" Label="End" @bind-Value="_project.EndDate" ValidationFor="() => _project.EndDate" />

    <div class="flex gap-4">
        @if (Id.HasValue)
        {
            <MyButton Level="MyButton.ButtonLevel.Danger" AddMarginTop="true" Text="Delete" OnClick="DeleteProject" />
        }
        <MyButton Type="submit" Level="MyButton.ButtonLevel.Primary" AddMarginTop="true" Text="Save" />
    </div>


    @* <ValidationSummary /> *@
</EditForm>

@code {

    [Parameter] public int? Id { get; set; }

    private string _title = "Create a new project";
    private ProjectRequest _project = new();

    protected override void OnInitialized()
    {
        ProjectService.StateChanged += OnStateChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await ProjectService.GetByIdAsync(Id.Value);
            _project = result.Adapt<ProjectRequest>();
            _title = "Edit project";
        }
    }

    private async Task Submit()
    {
        if (Id is not null)
        {
            await ProjectService.Update(Id.Value, _project);
            NavigationManager.NavigateTo("/projects");
        }
        else
        {
            await ProjectService.Create(_project);
            NavigationManager.NavigateTo("/projects");
        }
    }

    public void Dispose()
    {
        ProjectService.StateChanged -= OnStateChanged;
    }

    private void OnStateChanged() => StateHasChanged();

    private async Task DeleteProject()
    {
        if (Id.HasValue)
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");

            if (confirmed)
            {
                await ProjectService.DeleteAsync(Id.Value);
                NavigationManager.NavigateTo("/projects");
            }
        }
    }
}
