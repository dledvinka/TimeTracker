@page "/time-entry"
@page "/time-entry/{id:int}"
@using Mapster

@inject ITimeEntryService TimeEntryService;
@inject IProjectService ProjectService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@implements IDisposable
@attribute [Authorize]

<h3>@_title</h3>

@* // MudBlazor, Syncfusion, Telerik, DevExpress, or any other UI library can be used to create a form. *@
<EditForm Model="_timeEntry" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <MyInputDate Id="startDate" @bind-Value="_timeEntry.Start" ValidationFor="() => _timeEntry.Start" Label="Start" />
    <MyInputNullableDate Id="endDate" @bind-Value="_timeEntry.End" ValidationFor="() => _timeEntry.End" Label="End" />
    <MyInputSelect Id="project" Label="Project" @bind-Value="_timeEntry.ProjectId" ValidationFor="() => _timeEntry.ProjectId"
                   Items="ProjectService.Projects.Select(p => new SelectListItem() { Value = p.Id.ToString(), DisplayName = p.Name})" />

    <div class="flex gap-4">
        @if (Id.HasValue)
        {
            <MyButton Text="Delete" Level="MyButton.ButtonLevel.Danger" AddMarginTop="true" OnClick="DeleteTimeEntry" />
        }
        <MyButton Text="Save" Type="submit" Level="MyButton.ButtonLevel.Primary" AddMarginTop="true" />
    </div>

</EditForm>

@code {

    [Parameter] public int? Id { get; set; }

    private string _title = "Create a new time entry";
    private TimeEntryRequest _timeEntry = new() { Start = DateTime.Now.Date };

    protected override void OnInitialized()
    {
        ProjectService.StateChanged += OnStateChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await TimeEntryService.GetTimeEntryByIdAsync(Id.Value);
            _timeEntry = result.Adapt<TimeEntryRequest>();
            _title = "Edit time entry";
        }
    }

    private async Task Submit()
    {
        if (Id is not null)
        {
            await TimeEntryService.UpdateTimeEntry(Id.Value, _timeEntry);
            NavigationManager.NavigateTo("/time-entries");
        }
        else
        {
            await TimeEntryService.CreateTimeEntry(_timeEntry);
            NavigationManager.NavigateTo("/time-entries");
        }
    }

    public void Dispose()
    {
        ProjectService.StateChanged -= OnStateChanged;
    }

    private void OnStateChanged() => StateHasChanged();

    private async Task DeleteTimeEntry()
    {
        if (Id.HasValue)
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure?");

            if (confirmed)
            {
                await TimeEntryService.DeleteAsync(Id.Value);
                NavigationManager.NavigateTo("/time-entries");
            }
        }
    }
}
