@page "/time-entries"
@inject ITimeEntryService TimeEntryService
@implements IDisposable

<PageTitle>Time entries</PageTitle>
<h1>Time entries</h1>

<table>
    <thead>
        <tr>
            <th>Start</th>
            <th>End</th>
            <th>Duration</th>
            <th>Project</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var timeEntry in TimeEntryService.TimeEntries)
        {
            <tr>
                <td>@timeEntry.Start</td>
                <td>@timeEntry.End</td>
                <td>@GetDuration(@timeEntry.Start, @timeEntry.End)</td>
                <td>@timeEntry.Project.Name</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => ShowProject(timeEntry.Project.Id)">Show project</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<ProjectDetails ProjectId="@_projectId" />

@code {
    private int _projectId;

    protected override async Task OnInitializedAsync()
    {
        await TimeEntryService.GetTimeEntriesByProject(_projectId);
        TimeEntryService.StateChanged += OnStateChanged;
    }

    private void OnStateChanged()
    {
        StateHasChanged();
        ShowProject(default);
    }
    
    private void ShowProject(int projectId)
    {
        if (_projectId == projectId)
            return;

        _projectId = projectId;
        StateHasChanged();
    }

    private string GetDuration(DateTime startDate, DateTime? endDate)
    {
        if (!endDate.HasValue)
            return string.Empty;

        var duration = endDate.Value - startDate;
        var result = $"{duration.Hours}h {duration.Minutes}min";

        return result;
    }


    public void Dispose()
    {
        TimeEntryService.StateChanged -= OnStateChanged;
    }

}
